Declare pointers to two data structures/linked lists, one for stack 'a' and another for 'b'
        Set both pointers to NULL to avoid undefined behaviour and indicate we're starting with empty stacks
Handle inputs count errors. Argument count must be 2 or more, and the second input must not be empty 
        if input errors, return error
Handle both cases of input, whether a variable number of command line arguments, or a string.
        if teh input of numbers is a string, call split() to split the substrings
Initialize stack 'a' by appending eacch input number as a node to stack 'a'
        Handle integer overflow duplicates and syntax errors e.g inpout must only contain digits or '-' ' +' ssigns.
            if errors found free stack 'a' and return error
        check for each input if it is a long integer
            if the input is a string convert it to a long integer.
        append the nodes to stack

check if stack 'a' is sorted 
    //if not sorted, implement our sorting algorithm 
        check for 2 numbers 
            if so, simply swap the numbers
        check for 3 numbers
            if so, implement our simple sort three algorithm
        check if the stack has more then 3 numbers
        

BASIC UTILS:
 
1. Functions to handle errors
2.Operations:
    1.sa.
    2.sb.
    3.ss.
    4.ra.
    5.rb.
    6.rra.
    7.push
    8.etc
3.stack length
4.last node
5.min and max nodes

BIG functions 
main.c
split.c
stack_init.c
stack_sorted.c
sort_three.c
sort_stacks.c