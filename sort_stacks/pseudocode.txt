function sort_stacks(stack_a, stack_b)
    while stack_a is not sorted do
        calculate_push_cost for each node in stack_a
        find the node with the cheapest push_cost (let's call it cheapest_node)
        if cheapest_node is above_median then
            execute 'pb' (push cheapest_node from stack_a to stack_b)
        else
            execute 'ra' (rotate stack_a up by one element)
        end if
    end while

    while stack_b is not empty do
        find the node with the maximum nbr in stack_b
        rotate stack_b until the maximum node is at the top (execute 'rb' or 'rrb' as needed)
        execute 'pa' (push the top node of stack_b back to stack_a)
    end while
end function

function calculate_push_cost(node, stack_a, stack_b)
    calculate the cost of pushing this node from stack_a to stack_b
    this might involve calculating the number of 'ra' or 'rra' operations needed to bring the node to the top of stack_a,
    and the number of 'rb' or 'rrb' operations needed to insert the node at the correct position in stack_b
    store the result in the push_cost field of the node
end function





function sort_stacks(stack_a, stack_b)
    while stack_a is not sorted do
        if the top element of stack_a is less than the median of stack_a then
            execute 'pb' (push the top element of stack_a to stack_b)
        else
            execute 'ra' (rotate stack_a up by one element)
        end if
    end while

    while stack_b is not empty do
        find the maximum element in stack_b
        rotate stack_b until the maximum element is at the top (execute 'rb' or 'rrb' as needed)
        execute 'pa' (push the top element of stack_b back to stack_a)
    end while
end function

function median(stack)
    copy the elements of stack to a new list
    sort the list
    return the middle element of the sorted list
end function

function max(stack)
    initialize max_value to the top element of stack
    for each element in stack do
        if element is greater than max_value then
            set max_value to element
        end if
    end loop
    return max_value
end function

function execute(command, stack_a, stack_b)
    if command is 'pb' then
        push the top element of stack_a to stack_b
    else if command is 'ra' then
        rotate stack_a up by one element
    else if command is 'rb' or command is 'rrb' then
        rotate stack_b until the maximum element is at the top
    else if command is 'pa' then
        push the top element of stack_b back to stack_a
    end if
end function
